/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.optizen.app;

import java.awt.Component;
import java.awt.Dialog;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import org.optizen.model.ResultSetTableModel;
import org.optizen.util.DateUtil;
import org.optizen.util.Settings;
import org.optizen.util.Util;
import org.optizen.util.model.LinkModel;

/**
 *
 * @author r.hendrick
 */
public class TransferFrame extends javax.swing.JInternalFrame implements InternalFrameListener {

    /**
     * Counter frame allow to count the frame
     */
    static Integer openFrameCount = 0;
    static final int xOffset = 30, yOffset = 30;
    static String MoniteurExportFilename = "MoniteurExport_TR_CPT_MVTS.bat";
    LoadingFrame loadingFrame = null;

    private FrequencyUp frequencyUp;
    private Integer autoStep = 0;
    
    private JFrame owner = null;

    /**
     * Creates new form TransferFrame
     * @param parent
     */
    public TransferFrame(JFrame parent) {
        owner = parent;
        initComponents();
        refreshTableTr();

        TableCellRenderer tableCellRenderer = new DefaultTableCellRenderer() {
            SimpleDateFormat f = new SimpleDateFormat("dd/MM/yy hh:mm:ss");
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus,int row, int column) {
                if (value instanceof Date) {
                    value = f.format(value);
                }
                return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            }
        };
        
        tableData.getColumnModel().getColumn(6).setCellRenderer(tableCellRenderer);
        tableData.getColumnModel().getColumn(9).setCellRenderer(tableCellRenderer);
        tableData.getColumnModel().getColumn(10).setCellRenderer(tableCellRenderer);
        
        tableTr.getColumnModel().getColumn(6).setCellRenderer(tableCellRenderer);
        tableTr.getColumnModel().getColumn(9).setCellRenderer(tableCellRenderer);
        tableTr.getColumnModel().getColumn(10).setCellRenderer(tableCellRenderer);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gpPlanifMode = new javax.swing.ButtonGroup();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableData = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        search = new javax.swing.JButton();
        moveToTr = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableTr = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnSendToDatabase = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        sendToDatabaseError = new javax.swing.JLabel();
        btnShowLoadingFrame = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        cbMDay = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbMHour = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cbMMin = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        cbMSec = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        cbFDay = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        cbFHour = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        cbFMin = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        cbFSec = new javax.swing.JComboBox<>();
        rbModeMoment = new javax.swing.JRadioButton();
        rbModeFrequence = new javax.swing.JRadioButton();
        btnTogglerPlan = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        labLastGenerate = new javax.swing.JLabel();
        labNextGenerate = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Transférer");
        setToolTipText("Permet de transférer les données en base opérationnelle optimaint");
        setFrameIcon(Ico.i16("/img/oz/transfer.png"));
        setPreferredSize(new java.awt.Dimension(1024, 840));

        jSplitPane1.setDividerLocation(375);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel1.setPreferredSize(new java.awt.Dimension(1022, 400));
        jPanel1.setLayout(new java.awt.BorderLayout());

        tableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TRCPT_ID", "TRCPT_SOCIETE", "TRCPT_EQUIPEMENT", "TRCPT_UNITE", "TRCPT_ORGANE", "TRCPT_VALEUR", "TRCPT_DATE_MVT", "TRCPT_INTERVENANT", "TRCPT_MESSAGE", "TRCPT_DATE_CREATION", "TRCPT_DATE_MOD", "TRCPT_CHRONO", "TRCPT_SITUATION"
            }
        ));
        jScrollPane1.setViewportView(tableData);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.setPreferredSize(new java.awt.Dimension(1062, 34));
        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 5));

        search.setIcon(Ico.i16("/img/oz/search.png")
        );
        search.setText("Chercher...");
        search.setToolTipText("Chercher les données disponibles pour transérer dans la bse optimaint");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        jPanel3.add(search);

        moveToTr.setIcon(Ico.i16("/img/oz/db_update.png")
        );
        moveToTr.setText("Envoyer en table TR");
        moveToTr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveToTrActionPerformed(evt);
            }
        });
        jPanel3.add(moveToTr);

        jPanel1.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        jSplitPane1.setTopComponent(jPanel1);

        tableTr.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tableTr);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1006, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(jPanel2);

        jPanel4.setMinimumSize(new java.awt.Dimension(485, 46));
        jPanel4.setPreferredSize(new java.awt.Dimension(949, 46));

        btnCancel.setIcon(Ico.i32("/img/oz/cancel.png"));
        btnCancel.setText("ANNULER");
        btnCancel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnCancel.setMaximumSize(null);
        btnCancel.setMinimumSize(null);
        btnCancel.setPreferredSize(null);
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnRefresh.setIcon(Ico.i32("/img/oz/refresh.png"));
        btnRefresh.setText("Rafraîchir");
        btnRefresh.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnRefresh.setMaximumSize(new java.awt.Dimension(3200, 3200));
        btnRefresh.setMinimumSize(new java.awt.Dimension(0, 36));
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnSendToDatabase.setIcon(Ico.i32("/img/oz/transfer.png"));
        btnSendToDatabase.setText("Envoyer en base Optimaint");
        btnSendToDatabase.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSendToDatabase.setMaximumSize(new java.awt.Dimension(3200, 3200));
        btnSendToDatabase.setMinimumSize(new java.awt.Dimension(0, 36));
        btnSendToDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendToDatabaseActionPerformed(evt);
            }
        });

        sendToDatabaseError.setForeground(new java.awt.Color(0, 102, 0));
        sendToDatabaseError.setText("-");

        btnShowLoadingFrame.setText("Voir Charg...");
        btnShowLoadingFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowLoadingFrameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSendToDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendToDatabaseError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnShowLoadingFrame)
                .addGap(160, 160, 160)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jSeparator1)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sendToDatabaseError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnSendToDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnShowLoadingFrame))
                        .addGap(0, 10, Short.MAX_VALUE)))
                .addContainerGap())
        );

        cbMDay.setEditable(true);
        cbMDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        cbMDay.setEnabled(false);

        jLabel1.setText("Jours : ");

        jLabel2.setText("Heure");

        cbMHour.setEditable(true);
        cbMHour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));
        cbMHour.setEnabled(false);

        jLabel3.setText("Minute");

        cbMMin.setEditable(true);
        cbMMin.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "52", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
        cbMMin.setEnabled(false);

        jLabel4.setText("secondes");

        cbMSec.setEditable(true);
        cbMSec.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "52", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
        cbMSec.setEnabled(false);

        jLabel5.setText("Jours : ");

        cbFDay.setEditable(true);
        cbFDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        jLabel6.setText("Heure");

        cbFHour.setEditable(true);
        cbFHour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));

        jLabel7.setText("Minute");

        cbFMin.setEditable(true);
        cbFMin.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "52", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
        cbFMin.setSelectedIndex(30);

        jLabel8.setText("secondes");

        cbFSec.setEditable(true);
        cbFSec.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "52", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        gpPlanifMode.add(rbModeMoment);
        rbModeMoment.setText("Moment");
        rbModeMoment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbModeMomentItemStateChanged(evt);
            }
        });

        gpPlanifMode.add(rbModeFrequence);
        rbModeFrequence.setSelected(true);
        rbModeFrequence.setText("Fréquence");

        btnTogglerPlan.setIcon(Ico.i32("/img/oz/planifier.png"));
        btnTogglerPlan.setText("Planifier");
        btnTogglerPlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTogglerPlanActionPerformed(evt);
            }
        });

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel9.setText("Dernière Génération");

        jLabel10.setText("Prochaine Génération");

        labLastGenerate.setText("-");

        labNextGenerate.setText("-");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnTogglerPlan, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(rbModeFrequence)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbFDay, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbFHour, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbFMin, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbFSec, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(rbModeMoment)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbMDay, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbMHour, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbMMin, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbMSec, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labNextGenerate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labLastGenerate, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(77, 77, 77))
            .addComponent(jSeparator2)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnTogglerPlan, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbModeMoment)
                            .addComponent(cbMDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(cbMHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(cbMMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(cbMSec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbModeFrequence, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbFDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(cbFHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(cbFMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(cbFSec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jSeparator3)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel10))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(labLastGenerate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labNextGenerate))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 1008, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        refreshTableTr();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnSendToDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendToDatabaseActionPerformed

        // Génération du fichier batch pour exécution
        File f = new File(MoniteurExportFilename);
        if (!f.exists()) {
            try {
                f.createNewFile();
                FileOutputStream fop = new FileOutputStream(f);

                String contents[] = {"'## Optimaint_Moniteur.exe [{ID configuration}][,{valeur}[,{société}]]\n",
                    "'##\n",
                    "'## Les arguments mentionnés entourés des caractères '[' et ']' sont facultatifs.\n",
                    "'##\n",
                    "'## • {ID configuration} représente l'identification de la configuration de fonctionnement d'OptiMaint, par défaut la valeur utilisée est 'OptiMaint', \n",
                    "'## • {valeur} doit correspondre à la valeur 2,\n",
                    "'## • {société} correspond à l'identification de la société pour laquelle doit être lancé le traitement. \n",
                    "C:\n",
                    "cd \"C:\\Program Files (x86)\\Apisoft\\OptiMaint\"\n",
                    "OptiMaint_Moniteur.exe OptiMaint,2,11\n",
                    "exit 0"};

                // get the content in bytes
                for (String content : contents) {
                    byte[] contentInBytes = content.getBytes();
                    fop.write(contentInBytes);
                    fop.flush();
                }
                fop.close();
            } catch (IOException ex) {
                Logger.getLogger(TransferFrame.class.getName()).log(Level.SEVERE, null, ex);
                Util.out("Btn Send To Database : Impossible de créer un fichier de moniteur dû à l'erreur : " + ex.getLocalizedMessage());
                return;
            }
        }

        // Execution
        Runtime rt = Runtime.getRuntime();
        String[] commands = {MoniteurExportFilename};

        try {
            Process proc = rt.exec(commands);
//            BufferedReader stdInput = new BufferedReader(new InputStreamReader(proc.getInputStream()));
//
//        BufferedReader stdError = new BufferedReader(new InputStreamReader(proc.getErrorStream()));
//
//// read the output from the command
//        System.out.println("Here is the standard output of the command:\n");
//        String s = null;
//        while ((s = stdInput.readLine()) != null) {
//            System.out.println(s);
//        }
//
//// read any errors from the attempted command
//        System.out.println("Here is the standard error of the command (if any):\n");
//        while ((s = stdError.readLine()) != null) {
//            System.out.println(s);
//        }
            btnSendToDatabase.setEnabled(false);
            btnRefresh.setEnabled(false);

            WorkOnTransferToOpti wonm = new WorkOnTransferToOpti();
            wonm.execute();

            //This is what's called in the .execute method
            getLoadingFrame().setTitle("Loading : transfert to database ...");
            loadingFrame.setLocationRelativeTo(this);
            loadingFrame.setVisible(true);

            btnSendToDatabase.setEnabled(true);
            btnRefresh.setEnabled(true);
            autoStep++;
        } catch (IOException ex) {
            Logger.getLogger(TransferFrame.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnSendToDatabaseActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed

        // Remove existing rows
        DefaultTableModel tm = (DefaultTableModel) tableData.getModel();
        tm.getDataVector().removeAllElements();
        tm.fireTableDataChanged();

        search.setEnabled(false);
        moveToTr.setEnabled(false);

        WorkOnSearching wons = new WorkOnSearching();
        wons.execute();

        //This is what's called in the .execute method
        getLoadingFrame().setTitle("Loading : searching ...");
        loadingFrame.setLocationRelativeTo(this);
        loadingFrame.setVisible(true);

        search.setEnabled(true);
        moveToTr.setEnabled(true);

        // Can go to next step
        autoStep++;
    }//GEN-LAST:event_searchActionPerformed

    private void moveToTrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveToTrActionPerformed

        // Vérifie que des données sont disponible pour le transfere
        if (tableData.getRowCount() == 0) {
            if (!btnTogglerPlan.isSelected()) {
                JOptionPane.showMessageDialog(this,
                        "Aucune données à placer dans la table TR !\nExécuter une recherche ...",
                        "Envoyer en table TR : pas de données à transférer",
                        JOptionPane.WARNING_MESSAGE);
            }
            autoStep = 3;
            return;
        }

        // Informe sur la suppression de donnée en table TR si des données sont existante
        if (tableTr.getRowCount() > 0 && !btnTogglerPlan.isSelected()) {
            int result = JOptionPane.showConfirmDialog(this,
                    "Des données sont disponible dans la base TR ! En poursuivant, vous allez les perdres.\n"
                    + "Voulez-vous continuer ?",
                    "Rafraîchir : confirmer les données perdu",
                    JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_CANCEL_OPTION) {
                refreshTableTr();
                return;
            }
        }

        search.setEnabled(false);
        moveToTr.setEnabled(false);

        WorkOnMoveToTr wonm = new WorkOnMoveToTr();
        wonm.execute();

        //This is what's called in the .execute method
        getLoadingFrame().setTitle("Loading : move data to TR ...");
        loadingFrame.setLocationRelativeTo(this);
        loadingFrame.setVisible(true);

        search.setEnabled(true);
        moveToTr.setEnabled(true);

        autoStep++;
    }//GEN-LAST:event_moveToTrActionPerformed

    private void rbModeMomentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbModeMomentItemStateChanged
        // TODO add your handling code here:

        Boolean mState = !cbMDay.isEnabled();
        cbMDay.setEnabled(mState);
        cbMHour.setEnabled(mState);
        cbMMin.setEnabled(mState);
        cbMSec.setEnabled(mState);

        Boolean fState = !cbFDay.isEnabled();
        cbFDay.setEnabled(fState);
        cbFHour.setEnabled(fState);
        cbFMin.setEnabled(fState);
        cbFSec.setEnabled(fState);


    }//GEN-LAST:event_rbModeMomentItemStateChanged

    private void btnTogglerPlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTogglerPlanActionPerformed
        // TODO add your handling code here:
        if (btnTogglerPlan.isSelected()) {
            frequencyUp = new FrequencyUp(
                    Integer.valueOf(cbFDay.getSelectedItem().toString()),
                    Integer.valueOf(cbFHour.getSelectedItem().toString()),
                    Integer.valueOf(cbFMin.getSelectedItem().toString()),
                    Integer.valueOf(cbFSec.getSelectedItem().toString()));

            if (rbModeMoment.isSelected()) {
                Boolean mState = !cbMDay.isEnabled();
                cbMDay.setEnabled(mState);
                cbMHour.setEnabled(mState);
                cbMMin.setEnabled(mState);
                cbMSec.setEnabled(mState);
                rbModeMoment.setEnabled(mState);
            }

            if (rbModeFrequence.isSelected()) {
                Boolean fState = !cbFDay.isEnabled();
                cbFDay.setEnabled(fState);
                cbFHour.setEnabled(fState);
                cbFMin.setEnabled(fState);
                cbFSec.setEnabled(fState);
                rbModeFrequence.setEnabled(fState);
            }
            rbModeMoment.setEnabled(false);
            rbModeFrequence.setEnabled(false);
        } else {
            frequencyUp.kill();
            frequencyUp = null;
            if (rbModeMoment.isSelected()) {
                Boolean mState = !cbMDay.isEnabled();
                cbMDay.setEnabled(mState);
                cbMHour.setEnabled(mState);
                cbMMin.setEnabled(mState);
                cbMSec.setEnabled(mState);
                rbModeMoment.setEnabled(mState);
            }

            if (rbModeFrequence.isSelected()) {
                Boolean fState = !cbFDay.isEnabled();
                cbFDay.setEnabled(fState);
                cbFHour.setEnabled(fState);
                cbFMin.setEnabled(fState);
                cbFSec.setEnabled(fState);
                rbModeFrequence.setEnabled(fState);
            }
            rbModeMoment.setEnabled(true);
            rbModeFrequence.setEnabled(true);
        }


    }//GEN-LAST:event_btnTogglerPlanActionPerformed

    private void btnShowLoadingFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowLoadingFrameActionPerformed
       
        loadingFrame.setVisible(true);
    }//GEN-LAST:event_btnShowLoadingFrameActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSendToDatabase;
    private javax.swing.JButton btnShowLoadingFrame;
    private javax.swing.JToggleButton btnTogglerPlan;
    private javax.swing.JComboBox<String> cbFDay;
    private javax.swing.JComboBox<String> cbFHour;
    private javax.swing.JComboBox<String> cbFMin;
    private javax.swing.JComboBox<String> cbFSec;
    private javax.swing.JComboBox<String> cbMDay;
    private javax.swing.JComboBox<String> cbMHour;
    private javax.swing.JComboBox<String> cbMMin;
    private javax.swing.JComboBox<String> cbMSec;
    private javax.swing.ButtonGroup gpPlanifMode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel labLastGenerate;
    private javax.swing.JLabel labNextGenerate;
    private javax.swing.JButton moveToTr;
    private javax.swing.JRadioButton rbModeFrequence;
    private javax.swing.JRadioButton rbModeMoment;
    private javax.swing.JButton search;
    private javax.swing.JLabel sendToDatabaseError;
    private javax.swing.JTable tableData;
    private javax.swing.JTable tableTr;
    // End of variables declaration//GEN-END:variables
    @Override
    public void internalFrameOpened(InternalFrameEvent e) {
        String methodName = getClass().getSimpleName() + Logger.getLogger(Util.class
                .getName()).getResourceBundleName() + " : internalFrameOpened() >> ";
        System.out.println(methodName + "internalFrameOpened !");
    }

    @Override
    public void internalFrameClosing(InternalFrameEvent e) {
        String methodName = getClass().getSimpleName() + " : internalFrameClosing() >> ";
        Util.out(methodName + "internal Frame Is Closing !");

    }

    @Override
    public void internalFrameClosed(InternalFrameEvent e) {
        String methodName = getClass().getSimpleName() + Logger.getLogger(Util.class
                .getName()).getResourceBundleName() + " : internalFrameClosed() >> ";
        System.out.println(methodName + "internalFrameClosed !");
    }

    @Override
    public void internalFrameIconified(InternalFrameEvent e) {
        String methodName = getClass().getSimpleName() + Logger.getLogger(Util.class
                .getName()).getResourceBundleName() + " : internalFrameIconified() >> ";
        System.out.println(methodName + "internalFrameIconified !");
    }

    @Override
    public void internalFrameDeiconified(InternalFrameEvent e) {
        String methodName = getClass().getSimpleName() + Logger.getLogger(Util.class
                .getName()).getResourceBundleName() + " : internalFrameDeiconified() >> ";
        System.out.println(methodName + "internalFrameDeiconified !");
    }

    @Override
    public void internalFrameActivated(InternalFrameEvent e) {
        String methodName = getClass().getSimpleName() + Logger.getLogger(Util.class
                .getName()).getResourceBundleName() + " : internalFrameActivated() >> ";
        System.out.println(methodName + "internalFrameActivated !");
    }

    @Override
    public void internalFrameDeactivated(InternalFrameEvent e) {
        String methodName = getClass().getSimpleName() + Logger.getLogger(Util.class
                .getName()).getResourceBundleName() + " : internalFrameDeactivated() >> ";
        System.out.println(methodName + "internalFrameDeactivated !");
    }

    /**
     * Refresh the table tr to see current content
     */
    private void refreshTableTr() {
        try {
            ResultSetTableModel tm = new ResultSetTableModel(DatabaseFrame.loadConnectionOptimaint(), "SELECT * FROM TR_CPT_MVTS");
            tableTr.setModel(tm);
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(TransferFrame.class.getName()).log(Level.SEVERE, null, ex);
            Util.out("TransfertFrame : refreshTableTr >> " +  ex.getMessage());
        }
    }
    
    /**
     * Get loading frame allow to get once the only window existing
     * @return 
     */
    private LoadingFrame getLoadingFrame(){
        if(loadingFrame==null){
            loadingFrame = new LoadingFrame(owner, Dialog.ModalityType.MODELESS);
        }
        return loadingFrame;
    }

    /**
     * This class searching available data from zenon to be import to optimaint
     * This is process in background.
     */
    public class WorkOnSearching extends SwingWorker<String, String> {

        @Override
        protected String doInBackground() throws Exception {

            try {
                
                //
                Util.out("TransfertFrame : WorkOnSearching : doInBackground >> Début de la recherche de nouvelle donnée...");
                
                // Remove all the specify row
                DefaultTableModel tm = (DefaultTableModel) tableData.getModel();

                // Load from file
                Object obj = Settings.read(Settings.LINK_LINK, Settings.COUNTER);
                Integer counter = Integer.valueOf(obj == null ? "0" : obj.toString());
                String company = Settings.read(Settings.CONFIG, Settings.COMPANY).toString();

                // Loop over available link
                Connection zenConn = DatabaseFrame.loadConnectionZenon();
                Statement zenState = zenConn.createStatement(
                        ResultSet.TYPE_SCROLL_INSENSITIVE,
                        ResultSet.CONCUR_READ_ONLY);

                Connection optConn = DatabaseFrame.loadConnectionOptimaint();
                Statement optiState = optConn.createStatement(
                        ResultSet.TYPE_SCROLL_INSENSITIVE,
                        ResultSet.CONCUR_READ_ONLY);
                
                Util.out("TransfertFrame : WorkOnSearching : doInBackground >> Nombre total de liaison = " + counter);

                loadingFrame.onInit();
                //counter = Math.min(counter, 8);
                
                for (int count = 0; count < counter; count++) {
                    // Gett link from settings
                    LinkModel link = Settings.readLinkModel(count);

                    // Get last record from optimaint for this link
                    String qLastOptiRecord
                            = "SELECT TOP 1  CMV_DATE_MVT "
                            + "FROM Optimaint.dbo.COMPTEURS_MVTS "
                            + "WHERE CMV_SOCIETE = '%s' AND CMV_EQUIPEMENT='%s' AND CMV_ORGANE='%s' AND CMV_UNITE='%s' "
                            + "ORDER BY CMV_DATE_MVT DESC";
                    qLastOptiRecord = String.format(qLastOptiRecord,
                            company,
                            link.getEquEquipement(),
                            link.getOrgOrgane(),
                            link.getUnite());
                    
                    //Util.out("QLastOptiRecord : " + qLastOptiRecord);

                    String lastOptiDateTime = "2000-01-01";

                    //L'objet ResultSet contient le résultat de la requête SQL
                    ResultSet optiResult = optiState.executeQuery(qLastOptiRecord);
                    if (optiResult.next()) { // Date déjà existante
                        lastOptiDateTime = optiResult.getObject(1).toString();
                    }
                    

                    // Recherche les données après la date enregistrée dans zenon
                    //
                    //link.getVariable();
                    String queryDatas
                            = "SELECT \"VALUE\", DATEADD (second , TIMESTAMP_S+" + ConfigFrame.sTZ()+ " , '1970-01-01' ) AS CPT_DATE_MVT "
                            + "FROM %s "
                            + "WHERE \"VARIABLE\"='%s' AND TIMESTAMP_S > (cast(DATEDIFF(s, '1970-01-01 00:00:00.000', '%s' ) as bigint)-(" + ConfigFrame.sTZ()+ ")) "
                            + "ORDER BY TIMESTAMP_S ASC";
                    //Util.out("QueryDatas = " + queryDatas);
                    queryDatas = String.format(queryDatas,
                            link.getTable(),
                            link.getVariable(),
                            lastOptiDateTime);
                    //Util.out("Query Datas : " + queryDatas);

                    ResultSet zenResult = zenState.executeQuery(queryDatas);
                    
                    zenResult.last();
                    int size = zenResult.getRow();
                    zenResult.beforeFirst();
                    loadingFrame.sub(0);
                    int subs = 0;
                    while (zenResult.next()) {
                        String value = zenResult.getObject(1).toString();
                        String dateMvt = zenResult.getObject(2).toString();

                        Object[] rowObject = new Object[]{
                            tableData.getRowCount() + 1, company, link.getEquEquipement(), link.getUnite(),
                            link.getOrgOrgane(), value, dateMvt, "MPRV", "", "", "", "", 0
                        };
                        tm.addRow(rowObject);
                        Integer subValue = (100 * (subs + 1)) / size;
                        loadingFrame.sub(subValue);
                        subs++;
                    }
                    Integer mainValue = (100 * (count + 1)) / counter;
                    loadingFrame.main(mainValue);
                    Thread.sleep(5);
                }
                tableData.setModel(tm);
                loadingFrame.setVisible(false);
            } catch (SQLException ex) {
                //Logger.getLogger(TransferFrame.class.getName()).log(Level.SEVERE, null, ex);
                Util.out("TransfertFrame : WorkOnSearching : doInBackground >> " + ex.getMessage());
                loadingFrame.setVisible(false);
                
            }
            loadingFrame.setVisible(false);
            return null;
        }

        @Override
        protected void process(List<String> item) {
            //This updates the UI
            //textArea.append(item + "\n");
        }
    }

    public class WorkOnMoveToTr extends SwingWorker<String, String> {

        @Override
        protected String doInBackground() {

            try {
                // Suppression du contenu de la table
                ResultSetTableModel tm = (ResultSetTableModel) tableTr.getModel();
                tm.setQueryDeleteOnAllRow("TR_CPT_MVTS");

                // Démarrage du transfer
                DefaultTableModel tmd = (DefaultTableModel) tableData.getModel();
                // Prepare the statement
                Connection conn = DatabaseFrame.loadConnectionOptimaint();

                String sql = "INSERT INTO TR_CPT_MVTS "
                        + "(TRCPT_SOCIETE, TRCPT_EQUIPEMENT, TRCPT_UNITE, TRCPT_ORGANE, TRCPT_VALEUR, TRCPT_DATE_MVT, TRCPT_INTERVENANT, TRCPT_SITUATION) "
                        + "values (?,?,?,?,?,?,?,?)";
                PreparedStatement ps = conn.prepareStatement(sql);
                loadingFrame.onInit();
                loadingFrame.sub(100);
                Integer rowCount = tableData.getRowCount();
                for (int row = 0; row < rowCount; row++) {
                    Vector rowCpt = (Vector) tmd.getDataVector().elementAt(row);

                    //ps.setInt(1, Integer.valueOf(rowCpt.get(0).toString()));
                    ps.setString(1, rowCpt.get(1).toString());
                    ps.setString(2, rowCpt.get(2).toString());
                    ps.setString(3, rowCpt.get(3).toString()); // Unite
                    ps.setString(4, rowCpt.get(4).toString()); // Orgnae
                    ps.setFloat(5, Float.valueOf(rowCpt.get(5).toString()));  // valeur
                    //ps.setDate(7, Date.valueOf(rowCpt.get(6).toString()));
                    ps.setTimestamp(6, java.sql.Timestamp.valueOf(rowCpt.get(6).toString())); // date time
                    ps.setString(7, rowCpt.get(7).toString()); // MPRV
                    ps.setInt(8, Integer.valueOf(rowCpt.get(12).toString()));

                    ps.executeUpdate();
                    loadingFrame.main((100 * (row + 1)) / rowCount);
                }
                loadingFrame.onFinish();
                refreshTableTr();
                loadingFrame.setVisible(false);
                return null;
            } catch (SQLException ex) {
                Logger.getLogger(TransferFrame.class.getName()).log(Level.SEVERE, null, ex);
                loadingFrame.onFinish();
                loadingFrame.setVisible(false);
                return null;
            }
        }

        @Override
        protected void process(List<String> item
        ) {
            //This updates the UI
            //textArea.append(item + "\n");
        }
    }

    public class WorkOnTransferToOpti extends SwingWorker<String, String> {

        @Override
        protected String doInBackground() {

            try {
                // Prepare the statement
                Connection conn = DatabaseFrame.loadConnectionOptimaint();

                String sql = "SELECT count(*) from TR_CPT_MVTS WHERE TRCPT_SITUATION=1 OR TRCPT_SITUATION=-1";
                ResultSetTableModel tm = new ResultSetTableModel(conn, sql);

                loadingFrame.onInit();
                loadingFrame.sub(100);
                Integer rowCount = tableTr.getRowCount();
                Integer traited = 0;
                while (traited < rowCount) {
                    tm.setQuery(sql);
                    traited = Integer.valueOf(tm.getValueAt(0, 0).toString());
                    Thread.sleep(1000);
                    loadingFrame.main((100 * (traited)) / rowCount);
                };
                tm.setQuery("SELECT count(*) from TR_CPT_MVTS WHERE TRCPT_SITUATION=-1");
                Integer errorCounter = Integer.valueOf(tm.getValueAt(0, 0).toString());
                if(errorCounter!=0){
                    sendToDatabaseError.setText("Impossible d'importer " + errorCounter + "/" + rowCount + " enrgistrement(s) ! Veuillez vérifier vos informations");
                    sendToDatabaseError.setForeground(new java.awt.Color(255, 51, 0));
                }else{
                    sendToDatabaseError.setText("Traitement réussi !" + errorCounter + " erreur sur " + rowCount);
                    sendToDatabaseError.setForeground(new java.awt.Color(0, 102, 0));
                }

                loadingFrame.onFinish();
                refreshTableTr();
                loadingFrame.setVisible(false);
                return null;
            } catch (SQLException | ClassNotFoundException | InterruptedException ex) {
                Logger.getLogger(TransferFrame.class.getName()).log(Level.SEVERE, null, ex);
                loadingFrame.onFinish();
                loadingFrame.setVisible(false);
                return null;
            }
        }

        @Override
        protected void process(List<String> item) {
            //This updates the UI
            //textArea.append(item + "\n");
        }
    }

    public class FrequencyUp {

        Toolkit toolkit;
        Timer timer;

        /**
         *
         */
        public FrequencyUp(int seconds) {
            toolkit = Toolkit.getDefaultToolkit();
            timer = new Timer();
            timer.schedule(new FrequencyTask(), DateUtil.maintenant(), seconds * 1000);
        }

        public FrequencyUp(Integer day, Integer hour, Integer min, Integer sec) {
            toolkit = Toolkit.getDefaultToolkit();
            timer = new Timer();
            Long lsec = (long) ((day * 84400) + (hour * 3600) + (min * 60) + (sec));
            timer.scheduleAtFixedRate(new FrequencyTask(), 0, lsec * 1000);

        }

        private void kill() {
            timer.cancel();
        }

        class FrequencyTask extends TimerTask {

            Integer frequencyCounter = 0;
            Boolean alreadyProcessing = false;

            @Override
            public void run() {
                LocalDateTime mnt = LocalDateTime.from(LocalDateTime.now());
                labLastGenerate.setText(mnt.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));

                long days = Long.valueOf(cbFDay.getSelectedItem().toString());
                long hours = Long.valueOf(cbFHour.getSelectedItem().toString());
                long mins = Long.valueOf(cbFMin.getSelectedItem().toString());
                long secs = Long.valueOf(cbFSec.getSelectedItem().toString());
                LocalDateTime next = mnt.plusDays(days).plusHours(hours).plusMinutes(mins).plusSeconds(secs);
                labNextGenerate.setText(next.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));

                if (btnTogglerPlan.isSelected() && autoStep <= 3) {
                    if (autoStep == 0) {
                        searchActionPerformed(null);
                    }
                    if (autoStep == 1) {
                        moveToTrActionPerformed(null);
                    }
                    if (autoStep == 2) {
                        btnSendToDatabaseActionPerformed(null);
                    }

                    //toolkit.beep();
                    frequencyCounter++;
                    //timer.cancel(); //Not necessary because we call System.exit
                }
                autoStep = 0;
                frequencyCounter = 0;
            }
        }

    }

}
