/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.optizen.app;

import com.sun.glass.events.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.WindowConstants;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.ini4j.Wini;
import org.optizen.model.DatabaseModel;
import org.optizen.model.ResultSetTableModel;
import org.optizen.util.DateUtil;
import org.optizen.util.Settings;
import org.optizen.util.Util;
import org.optizen.xlsx.ExcelFilter;
import org.optizen.xlsx.ExcelReader;
import org.optizen.xlsx.ExcelWriter;

/**
 *
 * @author r.hendrick
 */
public class LinkFrame extends javax.swing.JInternalFrame implements InternalFrameListener {

    /**
     * Counter frame allow to count the frame
     */
    static Integer openFrameCount = 0;
    static final int xOffset = 30, yOffset = 30;

    private ArrayList<Object> selectedRowZenon = null;
    private ArrayList<Object> selectedRowOpti = null;

    /**
     * Creates new form LinkFrame
     */
    public LinkFrame() {
        initComponents();

        // Initialisation des tables disponibles
        DefaultComboBoxModel cbModelDataZen = new javax.swing.DefaultComboBoxModel<>(Settings.zenTableData().toArray());
        cbFilterTableZen.setModel(cbModelDataZen);

        // Update Model Zen
        String param = cbFilterTableZen.getSelectedItem().toString().split(" ==> ")[0];
        String data = cbFilterTableZen.getSelectedItem().toString().split(" ==> ")[1];
        initTableZenon(param, data);

        // Update Model Opti
        initTableOptimaint();

        // Init table link
        clearAndLoadSavedLink();

        // Register Internal frame
        this.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
        openFrameCount++; // increment configFrame counter
        this.setClosable(true);
        addInternalFrameListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableLinkPopupMenu = new javax.swing.JPopupMenu();
        menuItemPopupDelete = new javax.swing.JMenuItem();
        excelFileChooserExporter = new javax.swing.JFileChooser();
        excelFileChooserImport = new javax.swing.JFileChooser();
        mainSplitPane = new javax.swing.JSplitPane();
        counterPane = new javax.swing.JPanel();
        subSplitPaneCounter = new javax.swing.JSplitPane();
        zenPane = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfFilterVariable = new javax.swing.JTextField();
        tfFilterNames = new javax.swing.JTextField();
        cbFilterTableZen = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableZen = new javax.swing.JTable();
        tfSetZen = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        optiPane = new javax.swing.JPanel();
        tfFilterEquCode = new javax.swing.JTextField();
        tfFilterEqui = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tfFilterOrgCode = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfFilterOrg = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        tfFilterUnite = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableOpti = new javax.swing.JTable();
        tfSetOpti = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        LinkPane = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableLink = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        btnExport = new javax.swing.JButton();
        btnImport = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        btnLinkSet = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        menuItemPopupDelete.setIcon(Ico.i16("/img/std/Delete.png")
        );
        menuItemPopupDelete.setText("Supprimer la sélection");
        menuItemPopupDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPopupDeleteActionPerformed(evt);
            }
        });
        tableLinkPopupMenu.add(menuItemPopupDelete);

        excelFileChooserExporter.setApproveButtonText("OK");
        excelFileChooserExporter.setDialogTitle("Définir le nom et chemin d'enregistrement ...");
        excelFileChooserExporter.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        excelFileChooserImport.setApproveButtonText("OK");
        excelFileChooserImport.setDialogTitle("Choix du document à importer...");
        excelFileChooserImport.setFileFilter(new ExcelFilter());

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Correspondance des données");
        setToolTipText("Cette fenêtre vous permet d'établir des liaisons entre les données");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFrameIcon(Ico.i16("/img/oz/link.png"));
        setPreferredSize(new java.awt.Dimension(1024, 680));
        setRequestFocusEnabled(false);
        setVerifyInputWhenFocusTarget(false);
        setVisible(true);

        mainSplitPane.setDividerLocation(300);
        mainSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        counterPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Compteurs", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(102, 102, 255))); // NOI18N

        subSplitPaneCounter.setDividerLocation(400);
        subSplitPaneCounter.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        zenPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ZENON", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 102, 51))); // NOI18N
        zenPane.setPreferredSize(new java.awt.Dimension(350, 335));

        jLabel1.setText("VARIABLES");

        jLabel2.setText("NAME");

        tfFilterVariable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfFilterVariableKeyPressed(evt);
            }
        });

        tfFilterNames.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfFilterNamesKeyPressed(evt);
            }
        });

        cbFilterTableZen.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbFilterTableZenItemStateChanged(evt);
            }
        });

        tableZen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N°", "Variable", "Name", "GUID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableZen.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tableZen);
        if (tableZen.getColumnModel().getColumnCount() > 0) {
            tableZen.getColumnModel().getColumn(0).setPreferredWidth(20);
            tableZen.getColumnModel().getColumn(1).setPreferredWidth(20);
            tableZen.getColumnModel().getColumn(3).setPreferredWidth(20);
        }

        tfSetZen.setEditable(false);

        jLabel8.setText("Set");

        javax.swing.GroupLayout zenPaneLayout = new javax.swing.GroupLayout(zenPane);
        zenPane.setLayout(zenPaneLayout);
        zenPaneLayout.setHorizontalGroup(
            zenPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(zenPaneLayout.createSequentialGroup()
                .addGroup(zenPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tfFilterVariable)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(zenPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(zenPaneLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(273, Short.MAX_VALUE))
                    .addComponent(tfFilterNames)))
            .addComponent(cbFilterTableZen, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, zenPaneLayout.createSequentialGroup()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfSetZen))
        );
        zenPaneLayout.setVerticalGroup(
            zenPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(zenPaneLayout.createSequentialGroup()
                .addGroup(zenPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(zenPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfFilterVariable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfFilterNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbFilterTableZen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(zenPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfSetZen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)))
        );

        subSplitPaneCounter.setLeftComponent(zenPane);

        optiPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "OPTIMAINT", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 51, 51))); // NOI18N

        tfFilterEquCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfFilterEquCodeKeyPressed(evt);
            }
        });

        tfFilterEqui.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfFilterEquiKeyPressed(evt);
            }
        });

        jLabel3.setText("Code EQU.");

        jLabel4.setText("EQUIPEMENT");

        jLabel5.setText("Code Organe");

        tfFilterOrgCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfFilterOrgCodeKeyPressed(evt);
            }
        });

        jLabel6.setText("ORGANE");

        tfFilterOrg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfFilterOrgKeyPressed(evt);
            }
        });

        jLabel7.setText("UNITE");

        tfFilterUnite.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfFilterUniteKeyPressed(evt);
            }
        });

        tableOpti.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N°", "CPT_EQUIPEMENT", "EQU_DESIGNATION", "CPT_ORGANE", "ORG_DESIGNATION", "CPT_UNITE", "CPT_COMMENTAIRE", "CPT_SOCIETE"
            }
        ));
        tableOpti.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(tableOpti);
        if (tableOpti.getColumnModel().getColumnCount() > 0) {
            tableOpti.getColumnModel().getColumn(0).setPreferredWidth(20);
            tableOpti.getColumnModel().getColumn(1).setPreferredWidth(20);
            tableOpti.getColumnModel().getColumn(3).setPreferredWidth(20);
            tableOpti.getColumnModel().getColumn(5).setPreferredWidth(20);
            tableOpti.getColumnModel().getColumn(7).setPreferredWidth(20);
        }

        tfSetOpti.setEditable(false);

        jLabel9.setText("Set");

        javax.swing.GroupLayout optiPaneLayout = new javax.swing.GroupLayout(optiPane);
        optiPane.setLayout(optiPaneLayout);
        optiPaneLayout.setHorizontalGroup(
            optiPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optiPaneLayout.createSequentialGroup()
                .addGroup(optiPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tfFilterEquCode)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optiPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfFilterEqui)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optiPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfFilterOrgCode, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optiPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tfFilterOrg)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optiPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfFilterUnite, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
            .addGroup(optiPaneLayout.createSequentialGroup()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfSetOpti))
        );
        optiPaneLayout.setVerticalGroup(
            optiPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optiPaneLayout.createSequentialGroup()
                .addGroup(optiPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(optiPaneLayout.createSequentialGroup()
                        .addGroup(optiPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(optiPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfFilterOrg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfFilterUnite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfFilterOrgCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(optiPaneLayout.createSequentialGroup()
                        .addGroup(optiPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(optiPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfFilterEquCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfFilterEqui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optiPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfSetOpti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)))
        );

        subSplitPaneCounter.setRightComponent(optiPane);

        javax.swing.GroupLayout counterPaneLayout = new javax.swing.GroupLayout(counterPane);
        counterPane.setLayout(counterPaneLayout);
        counterPaneLayout.setHorizontalGroup(
            counterPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(subSplitPaneCounter, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        counterPaneLayout.setVerticalGroup(
            counterPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(subSplitPaneCounter, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
        );

        mainSplitPane.setTopComponent(counterPane);

        LinkPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Correspondance Existantes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 153, 0))); // NOI18N

        tableLink.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N°", "TABLE", "VARIABLE", "NOM", "CODE EQU.", "EQUIPEMENT", "CODE ORG.", "ORGANE", "UNITE", "COMMENTAIRES", "DATE MODIF."
            }
        ));
        tableLink.setComponentPopupMenu(tableLinkPopupMenu);
        jScrollPane3.setViewportView(tableLink);
        if (tableLink.getColumnModel().getColumnCount() > 0) {
            tableLink.getColumnModel().getColumn(0).setPreferredWidth(60);
            tableLink.getColumnModel().getColumn(0).setMaxWidth(60);
            tableLink.getColumnModel().getColumn(1).setPreferredWidth(80);
            tableLink.getColumnModel().getColumn(2).setPreferredWidth(65);
            tableLink.getColumnModel().getColumn(2).setMaxWidth(65);
            tableLink.getColumnModel().getColumn(3).setPreferredWidth(200);
            tableLink.getColumnModel().getColumn(4).setPreferredWidth(80);
            tableLink.getColumnModel().getColumn(4).setMaxWidth(90);
            tableLink.getColumnModel().getColumn(5).setPreferredWidth(200);
            tableLink.getColumnModel().getColumn(6).setPreferredWidth(80);
            tableLink.getColumnModel().getColumn(6).setMaxWidth(90);
            tableLink.getColumnModel().getColumn(7).setPreferredWidth(65);
            tableLink.getColumnModel().getColumn(7).setMaxWidth(65);
            tableLink.getColumnModel().getColumn(8).setPreferredWidth(65);
            tableLink.getColumnModel().getColumn(8).setMaxWidth(65);
            tableLink.getColumnModel().getColumn(10).setMaxWidth(100);
        }

        javax.swing.GroupLayout LinkPaneLayout = new javax.swing.GroupLayout(LinkPane);
        LinkPane.setLayout(LinkPaneLayout);
        LinkPaneLayout.setHorizontalGroup(
            LinkPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 994, Short.MAX_VALUE)
        );
        LinkPaneLayout.setVerticalGroup(
            LinkPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
        );

        mainSplitPane.setRightComponent(LinkPane);

        jPanel4.setMinimumSize(new java.awt.Dimension(485, 46));
        jPanel4.setPreferredSize(new java.awt.Dimension(949, 46));
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 2));

        btnExport.setIcon(Ico.i32("/img/oz/xlsx_export.png"));
        btnExport.setText("EXPORTER");
        btnExport.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnExport.setMaximumSize(null);
        btnExport.setMinimumSize(null);
        btnExport.setPreferredSize(null);
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });
        jPanel4.add(btnExport);

        btnImport.setIcon(Ico.i32("/img/oz/xlsx_import.png"));
        btnImport.setText("IMPORTER");
        btnImport.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnImport.setMaximumSize(null);
        btnImport.setMinimumSize(null);
        btnImport.setPreferredSize(null);
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });
        jPanel4.add(btnImport);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setPreferredSize(new java.awt.Dimension(3, 36));
        jPanel4.add(jSeparator3);

        btnLinkSet.setIcon(Ico.i32("/img/oz/link.png"));
        btnLinkSet.setText("LIER");
        btnLinkSet.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnLinkSet.setMaximumSize(null);
        btnLinkSet.setMinimumSize(null);
        btnLinkSet.setPreferredSize(null);
        btnLinkSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLinkSetActionPerformed(evt);
            }
        });
        jPanel4.add(btnLinkSet);

        btnRefresh.setIcon(Ico.i32("/img/oz/refresh.png"));
        btnRefresh.setText("RAFRAICHIR");
        btnRefresh.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnRefresh.setMaximumSize(new java.awt.Dimension(3200, 3200));
        btnRefresh.setMinimumSize(new java.awt.Dimension(0, 36));
        btnRefresh.setPreferredSize(null);
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        jPanel4.add(btnRefresh);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setPreferredSize(new java.awt.Dimension(3, 36));
        jPanel4.add(jSeparator2);

        btnSave.setIcon(Ico.i32("/img/oz/save.png"));
        btnSave.setText("SAUVER");
        btnSave.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSave.setMaximumSize(new java.awt.Dimension(3200, 3200));
        btnSave.setMinimumSize(new java.awt.Dimension(0, 36));
        btnSave.setPreferredSize(null);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jPanel4.add(btnSave);

        btnCancel.setIcon(Ico.i32("/img/oz/cancel.png"));
        btnCancel.setText("ANNULER");
        btnCancel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnCancel.setMaximumSize(null);
        btnCancel.setMinimumSize(null);
        btnCancel.setPreferredSize(null);
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        jPanel4.add(btnCancel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(mainSplitPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainSplitPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbFilterTableZenItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbFilterTableZenItemStateChanged
        String param = cbFilterTableZen.getSelectedItem().toString().split(" ==> ")[0];
        String data = cbFilterTableZen.getSelectedItem().toString().split(" ==> ")[1];
        updateTableZenon(param, data);
    }//GEN-LAST:event_cbFilterTableZenItemStateChanged

    private void tfFilterVariableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfFilterVariableKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String param = cbFilterTableZen.getSelectedItem().toString().split(" ==> ")[0];
            String data = cbFilterTableZen.getSelectedItem().toString().split(" ==> ")[1];
            updateTableZenon(param, data);
        }
    }//GEN-LAST:event_tfFilterVariableKeyPressed

    private void tfFilterNamesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfFilterNamesKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String param = cbFilterTableZen.getSelectedItem().toString().split(" ==> ")[0];
            String data = cbFilterTableZen.getSelectedItem().toString().split(" ==> ")[1];
            updateTableZenon(param, data);
        }
    }//GEN-LAST:event_tfFilterNamesKeyPressed

    private void tfFilterEquCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfFilterEquCodeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            updateTableOptimaint();
        }
    }//GEN-LAST:event_tfFilterEquCodeKeyPressed

    private void tfFilterEquiKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfFilterEquiKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            updateTableOptimaint();
        }
    }//GEN-LAST:event_tfFilterEquiKeyPressed

    private void tfFilterOrgCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfFilterOrgCodeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            updateTableOptimaint();
        }
    }//GEN-LAST:event_tfFilterOrgCodeKeyPressed

    private void tfFilterOrgKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfFilterOrgKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            updateTableOptimaint();
        }
    }//GEN-LAST:event_tfFilterOrgKeyPressed

    private void tfFilterUniteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfFilterUniteKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            updateTableOptimaint();
        }
    }//GEN-LAST:event_tfFilterUniteKeyPressed

    private void btnLinkSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLinkSetActionPerformed
        // Vérifie que les sets ont été définis sinon quitte sur un warning
        if (tfSetZen.getText().isEmpty() || tfSetOpti.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner les deux set \nSet Zenon : " + tfSetZen.getText() + "\nSet Optimaint : " + tfSetOpti.getText(),
                    "Correspondance : Erreur de set", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Convertie en ligne de table
        int row = tableLink.getRowCount() + 1;
        String tableVar = cbFilterTableZen.getSelectedItem().toString().split(" ==> ")[0].trim();
        String tableName = cbFilterTableZen.getSelectedItem().toString().split(" ==> ")[1].trim();
        String variable = tfSetZen.getText().split(" \\| ")[0].trim();
        String varName = tfSetZen.getText().split(" \\| ")[1];

        String so[] = tfSetOpti.getText().split(" \\| ");
        String codeEqu = so[0];
        String codeEquipement = so[1];
        String codeOrg = so[2];
        String codeOrgane = so[3];
        String unite = so[4];
        String commentaire = so[5];
        String company = so[6];

        Object rowObject[] = new Object[]{row, tableName, variable, varName, codeEqu, codeEquipement, codeOrg, codeOrgane, unite, commentaire, company};

        // Vérifie que ce n'est pas un doublons 
        for (int lgn = 0; lgn < tableLink.getRowCount(); lgn++) {
            int d = 0;
            if (tableLink.getValueAt(lgn, 1).toString().trim().matches(tableName.trim())) {
                d++;
            }
            if (tableLink.getValueAt(lgn, 2).toString().trim().matches(variable.trim())) {
                d++;
            }
            if (tableLink.getValueAt(lgn, 4).toString().trim().matches(codeEqu.trim())) {
                d++;
            }
            String a = tableLink.getValueAt(lgn, 6).toString().trim();
            String b = codeOrg.trim();
            if (a.length() == b.length()) {
                d++;
            }
            if (tableLink.getValueAt(lgn, 8).toString().trim().matches(unite.trim())) {
                d++;
            }
            if (tableLink.getValueAt(lgn, 9).toString().trim().matches(commentaire.trim())) {
                d++;
            }
            if (d == 6) {
                JOptionPane.showMessageDialog(this, "Ce lien existe déjà à la ligne " + (lgn + 1) + "!\nIl ne peut être créé",
                        "Correspondance : Erreur de doublons", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        // Ajoute la ligne
        DefaultTableModel tm = (DefaultTableModel) tableLink.getModel();
        tm.addRow(rowObject);


    }//GEN-LAST:event_btnLinkSetActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        // Choix d'un nom de fichier d'enregistrement
        int result = excelFileChooserExporter.showDialog(this, "VALIDER");
        if (result != JFileChooser.APPROVE_OPTION) {
            Util.out("Aucun fichier n'a été définit ! Quit");
            return;
        }

        // Vérifie que le fichier n'existe pas
        File dir = excelFileChooserExporter.getSelectedFile();
        String fileName = "/" + "OptiZenLink_" + DateUtil.now().toString() + ".xlsx";
        fileName = fileName.replace(" ", "_").replace(":", "_");
        fileName = dir.getAbsolutePath() + fileName;
        Util.out("FileName :" + fileName);
        File excelFile = new File(fileName);

        if (excelFile.exists()) {
            result = JOptionPane.showConfirmDialog(this,
                    "Le fichier définit existe déjà !\nVoulez-vous l'écraser ?",
                    "Exporter les correspondances : ecrasement fichier...",
                    JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_CANCEL_OPTION) {
                return;
            }
        }

        // Create a writer
        ExcelWriter ew = new ExcelWriter();
        ew.switchToSheet("Export");

        // Write header skip col number
        TableColumnModel tcm = tableLink.getColumnModel();
        ArrayList<String> rowString = new ArrayList<>();
        for (int col = 1; col < tcm.getColumnCount(); col++) {
            rowString.add(tcm.getColumn(col).getHeaderValue().toString());
        }
        ew.writeRow(rowString);
        for (int col = 1; col < tcm.getColumnCount(); col++) {
            ew.setCellColour(1, col + 1, IndexedColors.LIGHT_BLUE);
        }

        // Write content
        DefaultTableModel tm = (DefaultTableModel) tableLink.getModel();

        for (int row = 0; row < tm.getRowCount(); row++) {
            rowString = new ArrayList<>();
            for (int col = 1; col < tm.getColumnCount(); col++) {
                rowString.add(tm.getValueAt(row, col).toString());
            }
            ew.writeRow(rowString);
        }

        // Close the file
        ew.writeAndClose(excelFile);


    }//GEN-LAST:event_btnExportActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        // Choix d'un nom de fichier d'enregistrement
        int result = excelFileChooserImport.showDialog(this, "VALIDER");
        if (result != JFileChooser.APPROVE_OPTION) {
            Util.out("Aucun fichier n'a été définit ! Quit");
            return;
        }

        File f = excelFileChooserImport.getSelectedFile();
        String fileName = f.getAbsolutePath();
        Util.out("File to read : " + fileName);
        try {
            ExcelReader er = new ExcelReader(fileName);
            er.switchToSheet("Export");

            int i = 1;
            DefaultTableModel tm = (DefaultTableModel) tableLink.getModel();
            while (!er.read(i).isEmpty()) {
                ArrayList<Object> rowObject = er.read(i);
                rowObject.add(0, tableLink.getRowCount() + 1);
                if (!isRowExist(rowObject)) {
                    tm.addRow(rowObject.toArray());
                }
                i++;
            }

            er.close();
        } catch (IOException ex) {
            Logger.getLogger(LinkFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        int result = JOptionPane.showConfirmDialog(this, "Les données non sauvées vont être perdu si vous continuer, voulez-vous sauvegarder d'abord ?",
                "Rafraîchir : confirmer les données perdu",
                JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_CANCEL_OPTION) {
            return;
        }
        clearAndLoadSavedLink();
        JOptionPane.showMessageDialog(this,
                "Rafraîchissement terminé !",
                "Rafraîchir : fin", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        int result = JOptionPane.showConfirmDialog(this, "Etes-vous sûr de vouloir sauvegarder ?",
                "Sauver : confirmer la sauvegarde",
                JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_CANCEL_OPTION) {
            return;
        }

        try {
            Wini ini = new Wini(new File(Settings.iniFilename));
            // Clean previous table 
            Object obj = Settings.read(Settings.LINK_LINK, Settings.COUNTER);
            Integer counter = Integer.valueOf(obj == null ? "0" : obj.toString());
            for (int count = 0; count < counter; count++) {
                ini.remove(Settings.LINK_LINK + "\\" + count);
            }

            JTable tm = tableLink;
            ini.put(Settings.LINK_LINK, Settings.COUNTER, tm.getRowCount());
            for (int row = 0; row < tm.getRowCount(); row++) {
                ini.add(Settings.LINK_LINK + "\\" + row + "\\num");
                ini.add(Settings.LINK_LINK + "\\" + row + "\\ztable");
                ini.add(Settings.LINK_LINK + "\\" + row + "\\variable");
                ini.add(Settings.LINK_LINK + "\\" + row + "\\name");
                ini.add(Settings.LINK_LINK + "\\" + row + "\\codeEqu");
                ini.add(Settings.LINK_LINK + "\\" + row + "\\equipement");
                ini.add(Settings.LINK_LINK + "\\" + row + "\\codeOrg");
                ini.add(Settings.LINK_LINK + "\\" + row + "\\organe");
                ini.add(Settings.LINK_LINK + "\\" + row + "\\unite");
                ini.add(Settings.LINK_LINK + "\\" + row + "\\commentaire");
                ini.add(Settings.LINK_LINK + "\\" + row + "\\autre");

                Wini.Section root = ini.get(Settings.LINK_LINK);
                Wini.Section sec = root.lookup("" + row);
                sec.add("num", tm.getValueAt(row, 0).toString());
                sec.add("ztable", tm.getValueAt(row, 1).toString());
                sec.add("variable", tm.getValueAt(row, 2).toString());
                sec.add("name", tm.getValueAt(row, 3).toString());
                sec.add("codeEqu", tm.getValueAt(row, 4).toString());
                sec.add("equipement", tm.getValueAt(row, 5).toString());
                sec.add("codeOrg", tm.getValueAt(row, 6).toString());
                sec.add("organe", tm.getValueAt(row, 7).toString());
                sec.add("unite", tm.getValueAt(row, 8).toString());
                sec.add("commentaire", tm.getValueAt(row, 9).toString());
                sec.add("autre", tm.getValueAt(row, 10).toString());
            }
            ini.store();
            JOptionPane.showMessageDialog(this, "Sauvegarde terminée avec succès", "Sauvegarde", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(Settings.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void menuItemPopupDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemPopupDeleteActionPerformed
        // TODO add your handling code here:
        int[] rows = tableLink.getSelectedRows();
        // Remove all the specify row
        DefaultTableModel tm = (DefaultTableModel) tableLink.getModel();
        for (int row = rows.length - 1; row >= 0; row--) {
            tm.removeRow(rows[row]);
        }

        for (int row = 0; row < tableLink.getRowCount(); row++) {
            tm.setValueAt(row + 1, row, 0);
        }
    }//GEN-LAST:event_menuItemPopupDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel LinkPane;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnLinkSet;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cbFilterTableZen;
    private javax.swing.JPanel counterPane;
    private javax.swing.JFileChooser excelFileChooserExporter;
    private javax.swing.JFileChooser excelFileChooserImport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSplitPane mainSplitPane;
    private javax.swing.JMenuItem menuItemPopupDelete;
    private javax.swing.JPanel optiPane;
    private javax.swing.JSplitPane subSplitPaneCounter;
    private javax.swing.JTable tableLink;
    private javax.swing.JPopupMenu tableLinkPopupMenu;
    private javax.swing.JTable tableOpti;
    private javax.swing.JTable tableZen;
    private javax.swing.JTextField tfFilterEquCode;
    private javax.swing.JTextField tfFilterEqui;
    private javax.swing.JTextField tfFilterNames;
    private javax.swing.JTextField tfFilterOrg;
    private javax.swing.JTextField tfFilterOrgCode;
    private javax.swing.JTextField tfFilterUnite;
    private javax.swing.JTextField tfFilterVariable;
    private javax.swing.JTextField tfSetOpti;
    private javax.swing.JTextField tfSetZen;
    private javax.swing.JPanel zenPane;
    // End of variables declaration//GEN-END:variables

    /**
     * Init table zenon allow at the first time to load data to the table zenon
     *
     * @param variable is the name of the variable table in zenon
     * @param data is the name of the data table in zenon
     */
    public void initTableZenon(String variable, String data) {
        String query = "SELECT * FROM " + variable + " ORDER BY " + variable + ".\"NAME\"";

        DatabaseModel dbm = DatabaseModel.parse(Settings.read(Settings.CONFIG, Settings.URL_ZEN).toString());
        try {
            ResultSetTableModel rstModel = new ResultSetTableModel(dbm, query);
            tableZen.setModel(rstModel);
            tableZen.getSelectionModel().addListSelectionListener(new RowZenListener());
            TableColumnModel tcm = tableZen.getColumnModel();
            tcm.getColumn(0).setMaxWidth(60);
            tcm.getColumn(2).setMaxWidth(50);
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(LinkFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Update Table Zenon is used during request over zenon table to update
     * value
     *
     * @param variable is the name of the variable table in zenon
     * @param data is the name of the data table in zenon
     */
    public void updateTableZenon(String variable, String data) {
        String query = "SELECT * FROM " + variable;
        int size = query.length();
        query += !tfFilterVariable.getText().isEmpty() ? " WHERE " + variable + ".VARIABLE like '" + tfFilterVariable.getText() + "'" : "";
        query += size == query.length() && !tfFilterNames.getText().isEmpty() ? " WHERE " : (!tfFilterNames.getText().isEmpty() ? " AND " : "");
        //query += !tfFilterNames.getText().isEmpty() && size!= query.length() ? " AND " : "";
        query += !tfFilterNames.getText().isEmpty() ? variable + ".NAME like '" + tfFilterNames.getText() + "'" : "";
        query += " ORDER BY " + variable + ".\"NAME\"";
        Util.out("Requested Query : " + query);

        ResultSetTableModel rstModel = (ResultSetTableModel) tableZen.getModel();
        rstModel.setQuery(query);
    }

    public void initTableOptimaint() {
        String company = Settings.read(Settings.CONFIG, Settings.COMPANY).toString();
        String query = "SELECT CPT_EQUIPEMENT, EQU_DESIGNATION, CPT_ORGANE, ORG_DESIGNATION, CPT_UNITE, CPT_COMMENTAIRE, CPT_SOCIETE "
                + "FROM COMPTEURS INNER JOIN EQUIPEMENTS ON CPT_EQUIPEMENT = EQU_EQUIPEMENT LEFT JOIN ORGANES ON CPT_ORGANE = ORG_ORGANE "
                + "WHERE CPT_SOCIETE = '" + company + "'";

        DatabaseModel dbm = DatabaseModel.parse(Settings.read(Settings.CONFIG, Settings.URL_OPTI).toString());
        try {
            ResultSetTableModel rstModel = new ResultSetTableModel(dbm, query);
            tableOpti.setModel(rstModel);
            tableOpti.getSelectionModel().addListSelectionListener(new RowOptiListener());
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(LinkFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void updateTableOptimaint() {
        String company = Settings.read(Settings.CONFIG, Settings.COMPANY).toString();
        String query = "SELECT CPT_EQUIPEMENT, EQU_DESIGNATION, CPT_ORGANE, ORG_DESIGNATION, CPT_UNITE, CPT_COMMENTAIRE, CPT_SOCIETE "
                + "FROM COMPTEURS INNER JOIN EQUIPEMENTS ON CPT_EQUIPEMENT = EQU_EQUIPEMENT LEFT JOIN ORGANES ON CPT_ORGANE = ORG_ORGANE "
                + "WHERE CPT_SOCIETE = '" + company + "'";

        query += !tfFilterEquCode.getText().isEmpty() ? " AND CPT_EQUIPEMENT like '" + tfFilterEquCode.getText() + "'" : "";
        query += !tfFilterEqui.getText().isEmpty() ? " AND EQU_DESIGNATION like '" + tfFilterEqui.getText() + "'" : "";
        query += !tfFilterOrgCode.getText().isEmpty() ? " AND CPT_ORGANE like '" + tfFilterOrgCode.getText() + "'" : "";
        query += !tfFilterOrg.getText().isEmpty() ? " AND ORG_DESIGNATION like '" + tfFilterOrg.getText() + "'" : "";
        query += !tfFilterUnite.getText().isEmpty() ? " AND CPT_UNITE like '" + tfFilterUnite.getText() + "'" : "";

        ResultSetTableModel rstModel = (ResultSetTableModel) tableOpti.getModel();
        rstModel.setQuery(query);

    }

    /**
     * Allow to clear table link and then reload it from ini file.
     */
    public void clearAndLoadSavedLink() {
        // Remove all the specify row
        DefaultTableModel tm = (DefaultTableModel) tableLink.getModel();
        for (int row = tm.getRowCount() - 1; row >= 0; row--) {
            tm.removeRow(row);
        }

        // Load from file
        Object obj = Settings.read(Settings.LINK_LINK, Settings.COUNTER);
        Integer counter = Integer.valueOf(obj == null ? "0" : obj.toString());

        for (int count = 0; count < counter; count++) {
            tm.addRow(Settings.readLink(count));
        }
        tableLink.setModel(tm);

    }

    @Override
    public void internalFrameOpened(InternalFrameEvent e) {
        String methodName = getClass().getSimpleName() + Logger.getLogger(Util.class
                .getName()).getResourceBundleName() + " : internalFrameOpened() >> ";
        System.out.println(methodName + "internalFrameOpened !");
    }

    @Override
    public void internalFrameClosing(InternalFrameEvent e) {
        String methodName = getClass().getSimpleName() + " : internalFrameClosing() >> ";
        Util.out(methodName + "internal Frame Is Closing !");
        
    }

    @Override
    public void internalFrameClosed(InternalFrameEvent e) {
        String methodName = getClass().getSimpleName() + Logger.getLogger(Util.class
                .getName()).getResourceBundleName() + " : internalFrameClosed() >> ";
        System.out.println(methodName + "internalFrameClosed !");
    }

    @Override
    public void internalFrameIconified(InternalFrameEvent e) {
        String methodName = getClass().getSimpleName() + Logger.getLogger(Util.class
                .getName()).getResourceBundleName() + " : internalFrameIconified() >> ";
        System.out.println(methodName + "internalFrameIconified !");
    }

    @Override
    public void internalFrameDeiconified(InternalFrameEvent e) {
        String methodName = getClass().getSimpleName() + Logger.getLogger(Util.class
                .getName()).getResourceBundleName() + " : internalFrameDeiconified() >> ";
        System.out.println(methodName + "internalFrameDeiconified !");
    }

    @Override
    public void internalFrameActivated(InternalFrameEvent e) {
        String methodName = getClass().getSimpleName() + Logger.getLogger(Util.class
                .getName()).getResourceBundleName() + " : internalFrameActivated() >> ";
        System.out.println(methodName + "internalFrameActivated !");
    }

    @Override
    public void internalFrameDeactivated(InternalFrameEvent e) {
        String methodName = getClass().getSimpleName() + Logger.getLogger(Util.class
                .getName()).getResourceBundleName() + " : internalFrameDeactivated() >> ";
        System.out.println(methodName + "internalFrameDeactivated !");
    }

    /**
     * Is row Exist allow to see if a defined row already define in the table
     * list The line number is not compared.
     *
     * @param rowObject
     * @return
     */
    public Boolean isRowExist(ArrayList<Object> rowObject) {

        String ztable = rowObject.get(1).toString().trim();
        String variable = rowObject.get(2).toString().trim();
        String codeEqu = rowObject.get(4).toString().trim();
        String codeOrg = rowObject.get(6).toString().trim();
        String unite = rowObject.get(8).toString().trim();
        String commentaire = rowObject.get(9).toString().trim();

        // Vérifie que ce n'est pas un doublons 
        for (int lgn = 0; lgn < tableLink.getRowCount(); lgn++) {
            int d = 0;

            if (tableLink.getValueAt(lgn, 1).toString().trim().matches(ztable)) {
                d++;
            }
            if (tableLink.getValueAt(lgn, 2).toString().trim().matches(variable)) {
                d++;
            }
            if (tableLink.getValueAt(lgn, 4).toString().trim().matches(codeEqu)) {
                d++;
            }
            String a = tableLink.getValueAt(lgn, 6).toString().trim();
            String b = codeOrg;
            if (a.length() == b.length()) {
                d++;
            }
            if (tableLink.getValueAt(lgn, 8).toString().trim().matches(unite)) {
                d++;
            }
            if (tableLink.getValueAt(lgn, 9).toString().trim().matches(commentaire)) {
                d++;
            }
            if (d == 6) {
                return true;
            }
        }
        return false;
    }

    /**
     * Convenient class to identify when a row is selected
     */
    private class RowZenListener implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent event) {
            if (event.getValueIsAdjusting()) {
                return;
            }
//            Util.out("Previous index : " + event.getFirstIndex()
//                    + " New index : " + event.getLastIndex());
            ResultSetTableModel tm = (ResultSetTableModel) tableZen.getModel();
            selectedRowZenon = tm.getSelectedRow(tableZen.getSelectedRow());
            tfSetZen.setText(selectedRowZenon.get(0)
                    + " | " + selectedRowZenon.get(1));
        }
    }

    private class RowOptiListener implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent event) {
            if (event.getValueIsAdjusting()) {
                return;
            }
//            Util.out("Previous index : " + event.getFirstIndex()
//                    + " New index : " + event.getLastIndex());
            ResultSetTableModel tm = (ResultSetTableModel) tableOpti.getModel();
            selectedRowOpti = tm.getSelectedRow(tableOpti.getSelectedRow());
            tfSetOpti.setText(selectedRowOpti.get(0)
                    + " | " + selectedRowOpti.get(1)
                    + " | " + selectedRowOpti.get(2)
                    + " | " + selectedRowOpti.get(3)
                    + " | " + selectedRowOpti.get(4)
                    + " | " + selectedRowOpti.get(5)
                    + " | " + selectedRowOpti.get(6));
        }
    }

}
